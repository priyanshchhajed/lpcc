def precedence_of(token, precedence):
    for op, prec in precedence:
        if token == op:
            return prec
    return -1

def main():
    precedence = [
        ('/', 1),
        ('*', 1),
        ('+', 2),
        ('-', 2)
    ]

    expr = input("\nEnter an expression for calculating Address codes: ")
    processed = [False] * len(expr)
    operators = []

    for i, token in enumerate(expr):
        for op, _ in precedence:
            if token == op:
                operators.append((token, i))

    print("\nOperators:\nOperators\tLocation number\n")
    for op, loc in operators:
        print(op + "\t\t" + str(loc))

    operators.sort(key=lambda x: precedence_of(x[0], precedence))

    print("\nOperators sorted in their precedence:\nOperators\tLocation number\n")
    for op, loc in operators:
        print(op + "\t\t" + str(loc))

    print()

    for i, (op, loc) in enumerate(operators):
        j = loc
        op1 = op2 = ""

        if processed[j - 1]:
            if precedence_of(operators[i - 1][0], precedence) == precedence_of(op, precedence):
                op1 = "t" + str(i)
            else:
                for x, (_, loc_x) in enumerate(operators):
                    if (j - 2) == loc_x:
                        op1 = "t" + str(x + 1)
                        break
        else:
            op1 = expr[j - 1]

        if processed[j + 1]:
            for x, (_, loc_x) in enumerate(operators):
                if (j + 2) == loc_x:
                    op2 = "t" + str(x + 1)
                    break
        else:
            op2 = expr[j + 1]

        print("t" + str(i + 1) + " = " + op1 + op + op2)
        processed[j] = processed[j - 1] = processed[j + 1] = True

if __name__ == "__main__":
    main()
 